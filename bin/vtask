#!/usr/bin/env python3

'Full terminal interface for TaskWarrior (task).'

import tasklib
from visidata import *

options.disp_date_fmt = '%Y-%m-%d %H:%M'
theme('color_task_changed', 'reverse yellow', 'color when vtask is changed')


def editTask(task):
    taskdesc = ''

    # pack "key: value" metadata
    for k in 'description project status'.split():
        taskdesc += '%s: %s\n' % (k, task[k])

    # pack annotations separated by ---
    for note in task["annotations"]:
        taskdesc += "\n---\n"
        taskdesc += note.description

    # add final sentinel to indicate how to separate if no notes
    taskdesc += "\n---\n"
    ret = launchExternalEditor(taskdesc)

    # unpack annotations separated by ---
    newnotes = ret.split("\n---\n")
    task["annotations"] = newnotes[1:]

    # unpack "key: value" metadata
    for line in newnotes[0].splitlines():
        k, v = line.split(': ', maxsplit=1)
        task[k] = v

#    task.save()


class TodoSheet(Sheet):
    rowtype = 'tasks'  # rowdef: tasklib.Task
    commands = [
        Command('^O', 'editTask(cursorRow)', 'edit notes in external $EDITOR', 'edit-notes'),
        Command('a', 't=newRow(description=input("new task: ")); rows.insert(cursorRowIndex+1, t); t.save(); cursorDown()', 'add new task', 'add-task'),
        Command('d', 'cursorRow.done(); cursorRow.refresh()', 'mark task as done', 'complete-task'),
        Command('gd', 'for r in selectedRows: r.done() or r.refresh()', 'mark task as done', 'complete-task'),
        Command('zd', 'cursorRow.delete(); cursorRow.refresh()', 'delete task', 'delete-task'),
        Command('gzd', 'for r in selectedRows: r.delete() or r.refresh()', 'delete task', 'delete-task'),
        Command('z^R', 'cursorRow.refresh()', '', 'refresh-tasks'),
        Command('z^S', 'cursorRow.save()', '', 'save-task'),
        Command('^S', 'list(r.save() for r in rows if r.modified)', '', 'save-modified-tasks'),
        Command(' ', 'cursorRow.stop() if cursorRow["start"] else cursorRow.start()', '', 'start-task'),
        Command(ENTER, 'vd.push(TaskAnnotationsSheet("cursorRow.description", source=cursorRow))', '', ''),
    ]
    columns = [
         ColumnItem('id', type=int, width=4),
         ColumnItem('project'),
         ColumnItem('description'),
         ColumnItem('status'),
         ColumnItem('urgency', type=float, fmtstr='{:.01f}'),
         ColumnItem('start', type=date),
         ColumnItem('due', type=date),
         ColumnItem('wait', type=date, width=0),
         ColumnItem('scheduled', type=date, width=0),
         ColumnItem('until', type=date, width=0),
         ColumnItem('entry', type=date, width=0),
         ColumnItem('modified', type=date, width=0),
         ColumnItem('completed', type=date, width=0),
#         ColumnItem('depends'),
         Column('tags', getter=lambda c,r: ' '.join(r["tags"]),
                        setter=lambda c,r: r["tags"].tags.split(' ')),
#         ColumnItem('tags'),
         ColumnItem('annotations', type=len),
#        Column('age', width=3, getter=lambda c,r: date()-r.date_entered), # formatter=duration
    ]
    nKeys = 1
    colorizers = Sheet.colorizers + [
        CellColorizer(8, 'color_task_changed', lambda s,c,r,v: isChanged(r, c.name)),
    ]
    def newRow(self, **kwargs):
        return tasklib.Task(self.tw, **kwargs)

    def reload(self):
        self.tw = tasklib.TaskWarrior(data_location=self.source.resolve(), create=True)
        self.rows = list(self.tw.tasks.pending())
        self.orderBy(self.column('urgency'), reverse=True)

def isChanged(r, key):
    return r._data.get(key, None) != r._original_data.get(key, None)


class TaskAnnotationsSheet(Sheet):
    rowtype = 'notes'  # rowdef: TaskAnnotation
    columns = [
        ColumnItem('entry', type=date),
        ColumnItem('description'),
    ]
    commands = [
        Command('a', 'source.add_annotation(input("note: ")); reload()', 'add annotation to task', 'add-task-note'),
        Command('d', 'source.remove_annotation(cursorRow); reload()', 'remove annotation from task', 'delete-task-note'),
    ]
    def reload(self):
        self.rows = self.source['annotations']


addGlobals(globals())

run(TodoSheet('todos', source=Path('~/.task')))
